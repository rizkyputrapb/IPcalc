/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pemjar;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author rizky
 */
public class JFrame_Task1 extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_Task1
     */
    public JFrame_Task1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtIPAddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtNetmask = new javax.swing.JTextField();
        btnProcess = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtIPRange = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSegment = new javax.swing.JLabel();
        txtHost = new javax.swing.JLabel();
        txtFirstIP = new javax.swing.JLabel();
        txtLastIP = new javax.swing.JLabel();
        txtSubnet = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtIPAddress.setToolTipText("");
        txtIPAddress.setName(""); // NOI18N
        txtIPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPAddressActionPerformed(evt);
            }
        });

        jLabel1.setText("/");

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        jLabel2.setText("Segment");

        jLabel3.setText("Host");

        jLabel4.setText(":");

        jLabel5.setText(":");

        jLabel6.setText("First IP");

        jLabel7.setText(":");

        jLabel8.setText("Last IP");

        jLabel9.setText(":");

        jLabel10.setText("IP Range");

        txtIPRange.setEditable(false);
        txtIPRange.setColumns(20);
        txtIPRange.setRows(5);
        jScrollPane1.setViewportView(txtIPRange);

        jLabel11.setText("Subnet");

        jLabel12.setText(":");

        txtSegment.setText("-");

        txtHost.setText("-");

        txtFirstIP.setText("-");

        txtLastIP.setText("-");

        txtSubnet.setText("-");

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtLastIP))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtFirstIP))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtHost))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtSegment))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtSubnet))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNetmask, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnProcess, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtNetmask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcess))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(txtSegment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtHost))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(txtFirstIP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(txtLastIP))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txtSubnet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIPAddressActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        String address = txtIPAddress.getText();
        String[] tokens = address.split("\\.");
        int ip1 = Integer.parseInt(tokens[0]);
        int ip2 = Integer.parseInt(tokens[1]);
        int ip3 = Integer.parseInt(tokens[2]);
        int ip4 = Integer.parseInt(tokens[3]);
        int netmask = Integer.parseInt(txtNetmask.getText());

        try {
            //Subnet Calculation
            double jml = 0;

            if (netmask >= 8 && netmask <= 14) {
                jml = Math.pow(2, (netmask - 8));
            } else if (netmask >= 15 && netmask <= 24) {
                jml = Math.pow(2, (netmask - 16));
            } else if (netmask >= 25 && netmask <= 31) {
                jml = Math.pow(2, (netmask - 24));
            } else {
                txtSubnet.setText("Invalid netmask");
            }

            DecimalFormat df = new DecimalFormat("###.#");
            txtSubnet.setText("" + df.format(jml));

            //Subnet Mask Calculation
            int decimal = 128;
            int loop = 0;
            int res = 0;
            int divider, i;

            if (netmask >= 8 && netmask <= 15) {
                loop = netmask - 8;
            } else if (netmask >= 16 && netmask <= 23) {
                loop = netmask - 16;
            } else if (netmask >= 24 && netmask <= 31) {
                loop = netmask - 24;
            } else {

            }

            for (i = 0; i < loop; i++) {
                divider = decimal / 2;
                decimal = divider;
                res += decimal + divider;
            }

            if (netmask >= 8 && netmask < 16) {
            } else if (netmask >= 16 && netmask < 24) {

            } else if (netmask >= 24 && netmask < 32) {

            }

            //Binary
            int j;
            int remainder = 32 - netmask;
            String Binary = "";

            if (netmask >= 0 && netmask <= 31) {
                for (i = 0; i < netmask; i++) {
                    Binary += "1";
                    if (i == 7 | i == 15 | i == 23) {
                        Binary += ".";
                    }
                }
                j = i;

                for (i = 0; i < remainder; i++) {
                    Binary += "0";

                    if (j == 15 | j == 23) {
                        Binary += ".";
                    }
                    j++;
                }
            } else {

            }

            //Host Calculation
            if (netmask >= 8 && netmask <= 31) {
                jml = Math.pow(2, 32 - netmask) - 2;
                txtHost.setText("" + df.format(jml));
            } else {
                txtHost.setText("Invalid netmask");
            }

            //Network ID calculation
            int netID = 0;

            if (netmask >= 8 && (netmask <= 16)) {
                netID = res & ip2;
            } else if (netmask >= 17 && (netmask <= 24)) {
                netID = res & ip3;
            } else if (netmask >= 25 && (netmask <= 31)) {
                netID = res & ip4;
            } else {

            }

            //Broadcast ID calculation
            int brID = 0;
            double revNetmask;

            if (netmask >= 8 && netmask <= 16) {
                revNetmask = Math.pow(2, (16 - netmask)) - 1;
                brID = ip2 | (int) revNetmask;
            } else if (netmask >= 17 && netmask <= 24) {
                revNetmask = Math.pow(2, (24 - netmask)) - 1;
                brID = ip3 | (int) revNetmask;
            } else if (netmask >= 25 && netmask <= 31) {
                revNetmask = Math.pow(2, (32 - netmask)) - 1;
                brID = ip4 | (int) revNetmask;
            } else {

            }

            // First IP 
            if (netmask >= 8 && (netmask <= 16)) {
                netID += 1;
                txtFirstIP.setText(ip1 + "." + netID + ".0");
            } else if (netmask >= 17 && (netmask <= 24)) {
                netID += 1;
                txtFirstIP.setText(ip1 + "." + ip2 + "." + netID + ".0");
            } else if (netmask >= 25 && (netmask <= 31)) {
                netID += 1;
                txtFirstIP.setText(ip1 + "." + ip2 + "." + ip3 + "." + netID);
            } else {
                txtFirstIP.setText("netmask just have dari 8-31");
            }

            //Last IP
            if (netmask >= 8 && (netmask <= 16)) {
                brID -= 1;
                txtLastIP.setText(ip1 + "." + brID + ".0");
            } else if (netmask >= 17 && (netmask <= 24)) {
                brID -= 1;
                txtLastIP.setText(ip1 + "." + ip2 + "." + brID + ".0");
            } else if (netmask >= 25 && (netmask <= 31)) {
                brID -= 1;
                txtLastIP.setText(ip1 + "." + ip2 + "." + ip3 + "." + brID);
            } else {
                txtLastIP.setText("netmask just have 8-31");
            }

            //IP Range
            int ip;
            String pr = "";

            if (netmask >= 8 && netmask <= 31) {
//            ip = brID - netID;
                for (i = netID; i <= brID; i++) {
                    pr += String.valueOf(ip1 + "." + ip2 + "." + ip3 + "." + i) + "\n";
                }
                txtIPRange.setText(pr);
            } else {
                txtIPRange.setText("netmask just have 8-31");
            }

            //segment
            txtSegment.setText("" + netmask);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please input valid IP");
        }

    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
       this.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_Task1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_Task1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txtFirstIP;
    private javax.swing.JLabel txtHost;
    private javax.swing.JTextField txtIPAddress;
    private javax.swing.JTextArea txtIPRange;
    private javax.swing.JLabel txtLastIP;
    private javax.swing.JTextField txtNetmask;
    private javax.swing.JLabel txtSegment;
    private javax.swing.JLabel txtSubnet;
    // End of variables declaration//GEN-END:variables
}
